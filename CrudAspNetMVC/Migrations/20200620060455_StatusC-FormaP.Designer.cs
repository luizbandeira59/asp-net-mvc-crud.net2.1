// <auto-generated />
using System;
using CrudAspNetMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrudAspNetMVC.Migrations
{
    [DbContext(typeof(ControleContext))]
    [Migration("20200620060455_StatusC-FormaP")]
    partial class StatusCFormaP
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrudAspNetMVC.Models.Infra.UsuarioApp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.Categoria", b =>
                {
                    b.Property<long?>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatNome");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.FormaPagamento", b =>
                {
                    b.Property<long?>("FormaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormaNome");

                    b.HasKey("FormaId");

                    b.ToTable("FormaPagamento");
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.PagamentoProduto", b =>
                {
                    b.Property<long?>("ProdutoId");

                    b.Property<long?>("FormaId");

                    b.HasKey("ProdutoId", "FormaId");

                    b.HasIndex("FormaId");

                    b.ToTable("PagamentoProduto");
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.Produto", b =>
                {
                    b.Property<long?>("ProdutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CategoriaId");

                    b.Property<long?>("FormaId");

                    b.Property<string>("ProdutoDescricao");

                    b.Property<string>("ProdutoNome");

                    b.Property<long?>("StatusId");

                    b.HasKey("ProdutoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FormaId");

                    b.HasIndex("StatusId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.ProdutoStatus", b =>
                {
                    b.Property<long?>("ProdutoId");

                    b.Property<long?>("StatusId");

                    b.HasKey("ProdutoId", "StatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProdutoStatus");
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.StatusCompra", b =>
                {
                    b.Property<long?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusNome");

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Modelo.ListasBLL.DespesaDir", b =>
                {
                    b.Property<long?>("DespesaDirId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CategoriaId");

                    b.Property<DateTime>("DespDirData");

                    b.Property<double>("DespDirValor");

                    b.Property<long?>("FormaId");

                    b.Property<long?>("ProdutoId");

                    b.Property<long?>("StatusId");

                    b.HasKey("DespesaDirId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FormaId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("StatusId");

                    b.ToTable("DespesaDiretas");
                });

            modelBuilder.Entity("Modelo.ListasBLL.DespesaFixa", b =>
                {
                    b.Property<long?>("DespesaFixId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CategoriaId");

                    b.Property<DateTime>("DespFixData");

                    b.Property<double>("DespFixValor");

                    b.Property<long?>("FormaId");

                    b.Property<long?>("ProdutoId");

                    b.Property<long?>("StatusId");

                    b.HasKey("DespesaFixId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FormaId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("StatusId");

                    b.ToTable("DespesasFixas");
                });

            modelBuilder.Entity("Modelo.ListasBLL.ListaDesejo", b =>
                {
                    b.Property<long?>("DesejoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CategoriaId")
                        .IsRequired();

                    b.Property<DateTime>("DesejoData");

                    b.Property<double>("DesejoValor");

                    b.Property<long?>("FormaId")
                        .IsRequired();

                    b.Property<long?>("ProdutoId")
                        .IsRequired();

                    b.Property<long?>("StatusId")
                        .IsRequired();

                    b.HasKey("DesejoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FormaId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("StatusId");

                    b.ToTable("Desejos");
                });

            modelBuilder.Entity("Modelo.ListasBLL.ListaMercado", b =>
                {
                    b.Property<long?>("MercadoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CategoriaId");

                    b.Property<long?>("FormaId");

                    b.Property<DateTime>("MercadoData");

                    b.Property<double>("MercadoValor");

                    b.Property<long?>("ProdutoId");

                    b.Property<long?>("StatusId");

                    b.HasKey("MercadoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FormaId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("StatusId");

                    b.ToTable("Mercados");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CrudAspNetMVC.Models.Infra.UsuarioApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CrudAspNetMVC.Models.Infra.UsuarioApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudAspNetMVC.Models.Infra.UsuarioApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CrudAspNetMVC.Models.Infra.UsuarioApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.PagamentoProduto", b =>
                {
                    b.HasOne("Modelo.CadastrosBLL.FormaPagamento", "FormaPagamento")
                        .WithMany("PagamentoProdutos")
                        .HasForeignKey("FormaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Modelo.CadastrosBLL.Produto", "Produto")
                        .WithMany("PagamentoProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.Produto", b =>
                {
                    b.HasOne("Modelo.CadastrosBLL.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Modelo.CadastrosBLL.FormaPagamento", "FormaPagamento")
                        .WithMany("Produtos")
                        .HasForeignKey("FormaId");

                    b.HasOne("Modelo.CadastrosBLL.StatusCompra", "StatusCompra")
                        .WithMany("Produtos")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Modelo.CadastrosBLL.ProdutoStatus", b =>
                {
                    b.HasOne("Modelo.CadastrosBLL.Produto", "Produto")
                        .WithMany("ProdutosStatuss")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Modelo.CadastrosBLL.StatusCompra", "StatusCompra")
                        .WithMany("ProdutosStatuss")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modelo.ListasBLL.DespesaDir", b =>
                {
                    b.HasOne("Modelo.CadastrosBLL.Categoria", "Categoria")
                        .WithMany("DespesaDiretas")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Modelo.CadastrosBLL.FormaPagamento", "FormaPagamento")
                        .WithMany("DespesasDiretas")
                        .HasForeignKey("FormaId");

                    b.HasOne("Modelo.CadastrosBLL.Produto", "Produto")
                        .WithMany("DespesasDiretas")
                        .HasForeignKey("ProdutoId");

                    b.HasOne("Modelo.CadastrosBLL.StatusCompra", "Status")
                        .WithMany("DespesasDiretas")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Modelo.ListasBLL.DespesaFixa", b =>
                {
                    b.HasOne("Modelo.CadastrosBLL.Categoria", "Categoria")
                        .WithMany("DespesasFixas")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Modelo.CadastrosBLL.FormaPagamento", "FormaPagamento")
                        .WithMany("DespesasFixas")
                        .HasForeignKey("FormaId");

                    b.HasOne("Modelo.CadastrosBLL.Produto", "Produto")
                        .WithMany("DespesasFixas")
                        .HasForeignKey("ProdutoId");

                    b.HasOne("Modelo.CadastrosBLL.StatusCompra", "Status")
                        .WithMany("DespesasFixas")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Modelo.ListasBLL.ListaDesejo", b =>
                {
                    b.HasOne("Modelo.CadastrosBLL.Categoria", "Categoria")
                        .WithMany("ListaDesejos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Modelo.CadastrosBLL.FormaPagamento", "FormaPagamento")
                        .WithMany("ListaDesejos")
                        .HasForeignKey("FormaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Modelo.CadastrosBLL.Produto", "Produto")
                        .WithMany("Desejos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Modelo.CadastrosBLL.StatusCompra", "StatusCompra")
                        .WithMany("ListaDesejos")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modelo.ListasBLL.ListaMercado", b =>
                {
                    b.HasOne("Modelo.CadastrosBLL.Categoria", "Categoria")
                        .WithMany("Mercados")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Modelo.CadastrosBLL.FormaPagamento", "FormaPagamento")
                        .WithMany("Mercados")
                        .HasForeignKey("FormaId");

                    b.HasOne("Modelo.CadastrosBLL.Produto", "Produto")
                        .WithMany("Mercados")
                        .HasForeignKey("ProdutoId");

                    b.HasOne("Modelo.CadastrosBLL.StatusCompra", "Status")
                        .WithMany("Mercados")
                        .HasForeignKey("StatusId");
                });
#pragma warning restore 612, 618
        }
    }
}
